version: 2.1

orbs:
  slack: circleci/slack@4.10.1
  aws-cli: circleci/aws-cli@1.3.0

parameters:
  workflow-id:
    type: string
    default: "${CIRCLE_WORKFLOW_ID}"

commands:
  write-env-variables:
    description: Writes environment variables to env file
    steps:
      - run:
          name: Add env vars to .env file
          command: |
            ls -la
            echo ENVIROMENT=production > "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"

            # echo ENVIRONMENT=$ENVIRONMENT > "./backend/.env"
            # echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "./backend/.env"
            # echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "./backend/.env"
            # echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "./backend/.env"
            # echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "./backend/.env"
            # echo TYPEORM_HOST=$TYPEORM_HOST >> "./backend/.env"
            # echo TYPEORM_PORT=$TYPEORM_PORT >> "./backend/.env"
            # echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "./backend/.env"
            # echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "./backend/.env"
            # echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "./backend/.env"
  dependencies:
    steps:
      - run:
          name: Installing necessary packages
          command: |
            sudo apt update
            sudo apt install -y tar gzip curl software-properties-common
      - run:
          name: Installing aws-cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Installing ansible
          command: |
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: <<parameters.workflow_id>> "
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>

  revert-migrations:
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Reverting migrations
          when: on_fail
          command: |
            SUCCESS=$(curl "https://kvdb.io/LHFkzdfqGQiT5AocazCCLL//migration_<<parameters.workflow_id>>" -H "X-Api-Key: ${THISDB_API_KEY}")
            if (($SUCCESS == 1)); then
              cd backend
              npm install
              npm run migrations:revert
            fi

jobs:
  #1. Build Phase
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  #2. Test Phase
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run front-end test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run back-end test
          command: |
            cd backend
            npm install
            npm run test

  #3. Analyze Phase
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Scanning backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: Scanning frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
  #4 Alerts
  # work on alerts and do some more reading and research

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "Adding backend ip to inventory"
            BACKEND_AWS_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "http://$BACKEND_AWS_PUBLIC_IP:3030" >> .circleci/outputs/backend_url.txt
            # echo "[web]" >> .circleci/ansible/inventory.txt
            echo "$BACKEND_AWS_PUBLIC_IP" >> .circleci/ansible/inventory.txt
            cat .circleci/outputs/backend_url.txt
            cat .circleci/ansible/inventory.txt
      - run: yum -y install tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/outputs/backend_url.txt
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
        # environment:
        #   NODE_ENV: "production"
        #   VERSION: "1"
        #   ENVIRONMENT: "production"
        #   TYPEORM_CONNECTION: $TYPEORM_CONNECTION
        #   TYPEORM_HOST: $TYPEORM_HOST
        #   TYPEORM_USERNAME: $TYPEORM_USERNAME
        #   TYPEORM_PASSWORD: $TYPEORM_PASSWORD
        #   TYPEORM_DATABASE: $TYPEORM_DATABASE
        #   TYPEORM_PORT: $TYPEORM_PORT
        #   TYPEORM_ENTITIES: $TYPEORM_ENTITIES
    steps:
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["1d:b4:d2:cc:c8:a2:8c:98:91:67:8b:86:2c:1b:bf:51"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add curl
            apk add --upgrade bash
            apk add --update ansible
            echo "Ansible inventories >> Requires for the next job"
            apk add openssh-client
            pip3 install awscli
      - write-env-variables
      - run:
          name: Configure server
          no_output_timeout: 15m
          command: |
            echo "Print directory"
            ls -la
            # ls ~/project/.circleci/ansible/roles/deploy/files/
            cd ~/project/backend
            ansible-galaxy install weareinteractive.environment
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
      - run:
          name: Install AWS CLI for rollback
          when: on_fail
          command: |
            apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli

      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  run-migrations:
    docker:
      - image: sleavely/node-awscli:14.x
    steps:
      - checkout # Checkout code from git
      - restore_cache:
          keys:
            - build-backend
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
            echo NODE_ENV=production >> .env
            # export migration_status=$(cat migration.log | grep -c "has been executed successfully")
      - run:
          name: Send migration results to memstash /kvdb
          command: |
            if grep -q "has been executed successfully"  ./backend/migrations_dump.txt   
            then
              curl https://kvdb.io/LHFkzdfqGQiT5AocazCCLL//migration_${CIRCLE_WORKFLOW_ID:0:7} \
                -H "X-Api-Key: ${THISDB_API_KEY}" \
                -d "1"
            else
              curl https://kvdb.io/LHFkzdfqGQiT5AocazCCLL//migration_${CIRCLE_WORKFLOW_ID:0:7} \
                -H "X-Api-Key: ${THISDB_API_KEY}" \
                -d "0"
            fi
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-frontend:
    docker:
      - image: cimg/node:13.14.0
    steps:
      - checkout
      # - aws-cli/setup
      - restore_cache:
          keys:
            - build-frontend
      - dependencies

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(sed -n 2p .circleci/ansible/inventory.txt)
            export API_URL="http://$(sed -n 2p .circleci/ansible/inventory.txt):3030/api/status"
            echo "${API_URL}"
            echo ENVIRONMENT=production > "frontend/.env"
            echo NODE_ENV=production >> "frontend/.env"
            echo API_URL=$API_URL >> "frontend/.env"          
            # BACKEND_IP=$(aws cloudformation describe-stacks --stack-name udapeople-backend-"${CIRCLE_WORKFLOW_ID:0:7}" --query "Stacks[0].Outputs[0].OutputValue" --output text)
            # API_URL="http://${BACKEND_IP}:3030"
            # echo "API_URL=${API_URL}" >> frontend/.env
      - run:
          name: Build frontend
          command: |
            cd frontend
            npm run build
      - run:
          name: Deploy frontend objects
          working_directory: ./frontend
          command: |
            npm i
            npm audit fix
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      # - destroy-environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["1d:b4:d2:cc:c8:a2:8c:98:91:67:8b:86:2c:1b:bf:51"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible openssh-client tar gzip
      - restore_cache:
          keys: ["backend-dist"] # -<< pipeline.id >>
      - write-env-variables
      - run:
          name: Deploy backend
          no_output_timeout: 10m
          command: |
            cd /home
            tar czf backend.tar.gz -P /home/circleci/project/backend/dist
      - run:
          name: Deploy backend 2
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook \
              -i .circleci/ansible/inventory.txt \
              .circleci/ansible/deploy-backend.yml
      - run:
          name: Install AWS CLI for rollback
          when: on_fail
          command: |
            apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_URL=$(sed -n 2p .circleci/ansible/inventory.txt)
      - run:
          name: Backend smoke test.
          command: |
            if curl -s https://${BACKEND_URL}:3030/api/status
            then
            return 1
            else
            return 0
            fi
      - run:
          name: Frontend smoke test
          command: |
            if curl -s http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.us-east-1.amazonaws.com/ | grep "Welcome"
            then
            return 0
            else
            return 1
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - dependencies
      - run:
          name: get old workflow for clean
          command: |
            OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            curl https://kvdb.io/LHFkzdfqGQiT5AocazCCLL//migration_${CIRCLE_WORKFLOW_ID:0:7} \
            -H "X-Api-Key: ${THISDB_API_KEY}" \
            -d "$OldWorkflowID"
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            printf '%s\n' "${STACKS[@]}"
      - run:
          name: Updating cloudfront distribution
          command: |
            # aws cloudformation update-stack \
            # --use-previous-template \
            # --stack-name "udapeople-cloudfront" \
            # --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7} 
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople

      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  cleanup:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)

            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names 
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"

            for OldWorkflowID in "${STACKS[@]}"; do
              if [ "${OldWorkflowID}" != "<< pipeline.parameters.workflow-id >>" ]
              then
                echo "Current: $OldWorkflowID"
              else
                export OldId=${OldWorkflowID: -7}
                aws s3 rm "s3://udapeople-${OldId}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldId}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldId}"

              # aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              # aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              # aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              fi
            done

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: master
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
