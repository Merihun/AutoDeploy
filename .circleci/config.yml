version: 2.1
orbs:
  slack: circleci/slack@4.10.1
commands:
  create-dotenv-file:
    description: Create .env file
    steps:
      - run:
          name: Add env vars to .env file
          command: |
            echo ENVIRONMENT=$ENVIRONMENT > "./backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "./backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "./backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "./backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "./backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "./backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "./backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "./backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "./backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "./backend/.env"
  dependencies:
    steps:
      - run:
          name: Installing necessary packages
          command: |
            sudo apt update
            sudo apt install -y tar gzip curl software-properties-common
      - run:
          name: Installing aws-cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Installing ansible
          command: |
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: <<parameters.workflow_id>> "
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>
  revert-migrations:
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Reverting migrations
          when: on_fail
          command: |
            SUCCESS=$(curl "https://kvdb.io/LHFkzdfqGQiT5AocazCCLL//migration_<<parameters.workflow_id>>" -H "X-Api-Key: ${THISDB_API_KEY}")
            if (($SUCCESS == 1)); then
              cd backend
              npm install
              npm run migrations:revert
            fi

jobs:
  #1. Build Phase
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  #2. Test Phase
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run front-end test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run back-end test
          command: |
            cd backend
            npm install
            npm run test

  #3. Analyze Phase
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Scanning backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: Scanning frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
  #4 Alerts
  # work on alerts and do some more reading and research

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_AWS_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "http://$BACKEND_AWS_PUBLIC_IP:3030" >> .circleci/outputs/backend_url.txt
            # echo "[web]" >> .circleci/ansible/inventory.txt
            echo "$BACKEND_AWS_PUBLIC_IP" >> .circleci/ansible/inventory.txt
            cat .circleci/outputs/backend_url.txt
            cat .circleci/ansible/inventory.txt
      - run: yum -y install tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/outputs/backend_url.txt
            - project/.circleci/ansible/inventory.txt
      # - destroy-environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
        environment:
          NODE_ENV: "production"
          VERSION: "1"
          ENVIRONMENT: "production"
          TYPEORM_CONNECTION: $TYPEORM_CONNECTION
          TYPEORM_HOST: $TYPEORM_HOST
          TYPEORM_USERNAME: $TYPEORM_USERNAME
          TYPEORM_PASSWORD: $TYPEORM_PASSWORD
          TYPEORM_DATABASE: $TYPEORM_DATABASE
          TYPEORM_PORT: $TYPEORM_PORT
          TYPEORM_ENTITIES: $TYPEORM_ENTITIES
    steps:
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["1d:b4:d2:cc:c8:a2:8c:98:91:67:8b:86:2c:1b:bf:51"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add curl
            apk add --upgrade bash
            apk add --update ansible
            apk add openssh-client
            pip3 install awscli
      - run:
          name: Configure server
          command: |
            # ls ~/project/.circleci/ansible/roles/deploy/files/
            cd ~/project/backend
            ansible-galaxy install weareinteractive.environment
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
            # cat ~/project/.circleci/ansible/inventory.txt
            # export ANSIBLE_HOST_KEY_CHECKING=False
            # ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
      # - destroy-environment:
      #     workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
      # - undo_migrations

  run-migrations:
    docker:
      - image: sleavely/node-awscli:14.x
    steps:
      - checkout # Checkout code from git
      - restore_cache:
          keys:
            - build-backend
      - run:
          name: Run migrations
          command: |
            cd backend
            # cat .env
            # npm i
            # npm run build
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to memstash /kvdb
          command: |
            if grep -q "has been executed successfully"  ./backend/migrations_dump.txt   
            then
              curl https://kvdb.io/LHFkzdfqGQiT5AocazCCLL//migration_${CIRCLE_WORKFLOW_ID:0:7} \
                -H "X-Api-Key: ${THISDB_API_KEY}" \
                -d "1"
            else
              curl https://kvdb.io/LHFkzdfqGQiT5AocazCCLL//migration_${CIRCLE_WORKFLOW_ID:0:7} \
                -H "X-Api-Key: ${THISDB_API_KEY}" \
                -d "0"
            fi
  #     - destroy-environment:
  #         workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'

  deploy-frontend:
    docker:
      - image: cimg/node:13.14.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - build-frontend
      - dependencies

      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(aws cloudformation describe-stacks --stack-name udapeople-backend-"${CIRCLE_WORKFLOW_ID:0:7}" --query "Stacks[0].Outputs[0].OutputValue" --output text)
            API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=${API_URL}" >> frontend/.env

      - run:
          name: Deploy frontend objects
          working_directory: ./frontend
          command: |
            npm i
            npm audit fix
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "8d:54:2b:44:2f:93:c5:27:7c:d1:13:5f:a9:f2:6f:84"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            sudo apt-get install zip unzip python ansible python-pip && pip install awscli
      - run:
          name: Deploy backend
          command: |
            mkdir -p .circleci/ansible/roles/deploy/files
            cd backend
            npm i
            npm run build
            cp ~/project/backend/package.json ~/project/backend/dist
            cd ~/project/backend/dist
            zip -rq dist.zip *
            mv dist.zip ~/project/.circleci/ansible/roles/deploy/files
            cd ~/project
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
  # deploy-backend:
  #   docker:
  #     # Docker image that supports Ansible
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints:
  #           - "1d:b4:d2:cc:c8:a2:8c:98:91:67:8b:86:2c:1b:bf:51"
  #     - attach_workspace:
  #         at: .
  #     - restore_cache:
  #         keys: [backend-build-cache]
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update ansible
  #           apk add --no-cache curl
  #           apk add --no-cache openssh-client
  #           apk add --no-cache --upgrade bash
  #           pip install awscli
  #     - create-dotenv-file
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           pwd
  #           tar czf backend.tar.gz backend/
  #           export ANSIBLE_HOST_KEY_CHECKING=false
  #           ansible-playbook -i ./.circleci/ansible/inventory.txt ./.circleci/ansible/deploy-backend.yml -vvv
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: /root
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Backend smoke test.
          command: |
            # Fetch and prepare the BACKEND_IP env var
            export BACKEND_IP=$(aws ec2 describe-instances --region us-east-1  \
                --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --query "Reservations[].Instances[*].PublicIpAddress" \
                --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            curl -s "${API_URL}/api/status"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi

      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  # cloudfront-update:
  #   docker:
  #     - image: cimg/base:2021.04
  #   steps:
  #     - checkout
  #     - dependencies
  #     - run:
  #         name: get old workflow for clean
  #         command: |
  #           OldWorkflowID=$(aws cloudformation \
  #           list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
  #           --no-paginate --output text)
  #           curl https://kvdb.io/LHFkzdfqGQiT5AocazCCLL//migration_${CIRCLE_WORKFLOW_ID:0:7} \
  #           -H "X-Api-Key: ${THISDB_API_KEY}" \
  #           -d "$OldWorkflowID"
  #           export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
  #             --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
  #           printf '%s\n' "${STACKS[@]}"
  #     - run:
  #         name: Updating cloudfront distribution
  #         command: |
  #           aws cloudformation deploy \
  #           --template-file .circleci/files/cloudfront.yml \
  #           --stack-name InitialStack \
  #           --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
  #           --tags project=udapeople

  #     - destroy-environment:
  #         workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  #     - revert-migrations:
  #         workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y gcc-c++ make
            curl -sL https://rpm.nodesource.com/setup_13.x | bash -
            yum install -y nodejs
      - run:
          name: Update cloudfront distribution
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo "OLD_WORKFLOW_ID: $OLD_WORKFLOW_ID."
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --tags project=udapeople \
              --stack-name "udapeople-cloudfront" \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
            if [[ "${STACKS[@]}" =~ "${OLD_WORKFLOW_ID}" ]]
            then
              aws cloudformation delete-stack \
                --stack-name "udapeople-backend-${OLD_WORKFLOW_ID}"
              aws s3 rm --recursive "s3://udapeople-${OLD_WORKFLOW_ID}"
              aws cloudformation delete-stack \
                --stack-name "udapeople-frontend-${OLD_WORKFLOW_ID}"
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Remove old stacks and files
          command: |
            OldWorkflowID=$(curl -H "token: ecdfc255-81e1-4056-9efa-2d7fa10812e1" --request GET https://api.memstash.io/values/workflowid)
            CurrentWorkflowID=${CIRCLE_WORKFLOW_ID:0:7}
            if [[ $OldWorkflowID == "" ]]
            then
            echo "No workflow id found"
            else
            if [[ "$CurrentWorkflowID" != "$OldWorkflowID" ]]
            then
              echo "$OldWorkflowID!=$CurrentWorkflowID => will delete old version"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
            fi
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      # filters:
      #   branches:
      #     only: [test-feature-branch]

      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      - cloudfront-update:
          requires: [deploy-backend, deploy-frontend]
      - cleanup:
          requires: [cloudfront-update]
